Intro to D3
    - https://d3js.org/
    - JavaScript library for visualizing data using web standards.
    - Almost as many stars as React on Github
        - https://github.com/d3/d3
    - Open Source and used by a lot of companies
    - There are a lot of libraries built on D3

Insights into learning D3
    - It can be difficult to learn and understand
    - Try not to use copy and paste code
    - It is not always maintainable/understandable

Data + DOM Manipulation
    - D3 code is split into 2 areas
        - Data Manipulation and DOM manipulation
    - Data Manipulation is where variables declared, datasets set up etc
        - D3 is very good at manipulating data
    - DOM Manipulation
        - A lot of people use D3 to manipulate the page where data is rendered
        - D3.select is similar to using JQuery $ followed by a CSS selector
        - A grouping element operates similar to a div
        - A tranforming is similar to an attribute
        - Binding data to the DOM is the most confusing part of D3
        - D3 uses the enter-exit lifecycle to keep everything up to date
        - D3 daisy-chain semantics, this is just looping through data

Scales
    - They help translate between 2 different spaces
    - They are the most versatile and useful part of the D3 API
        - Most examples will have scales
    - They are a function which maps a domain to a range
        - They take an input dataset and calculate the output data
    - Ordinal scales are easiest as they map directly from a domain to a range
        - This means mapping keys directly to their values
    - Linear scales are more difficult and are used to translate between values and screen position
        - The beginning of the domain maps to the beginning of the range
        - This is also true of the top of the domain
        - There is interpolation of everything that is inbetween
            - This is also true of other scales types
            - It is also possible to go beyond the domain and the scale will try figuring the values
    - Experiment with things rather than know by heart

Layouts
    - These can be thought of as prebuilt calculations
    - They allow you to put in a dataset which will then perform actions automatically
    - There are a lot of layouts available
        - They are the data ie they do not render anything but give the information needed to render something
    - A piechart for example is a layout

Why use React + D3
    - React can help with D3's issues with readability, maintainability etc
    - React is designed to perform declarative rendering
        - This will eliminate worrying about the enter-exit lifecycle
    - Using the alphabetexample.js file (demo only!)
        - The code itself just loops through letters and returns a letter
        - It reshuffles the letters every 1.5 seconds
    - React performs rerendering after changes very well
    - Using the React\D3 approach components become more readable and reusable
    - The example uses histograms which would be difficult to uses as easily under solely D3
        - histogramexamples.js 
    -
